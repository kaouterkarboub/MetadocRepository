Images processing and splitting: 
Training data : over 600 images from : 
Testing data : 50 images (with Dr. Armiaâ€™s score for validation : reference). 

Step 1: dowload picture link above. 
Step 2: filer the images, here comes a really problematic thing, I noticed that there are images such as (see link) : 
Step 3: Convert all png files to jpg files. 




1. First Version: 
Code : 
https://colab.research.google.com/drive/1VJWZgVlMg0oHpgV6gptGl2Rorjd5IUtc?usp=sharing
Code Visualization: 
********************************************************************************************************************************
!pip install mediapipe

import math
import cv2
import numpy as np
from time import time
import mediapipe as mp 
import matplotlib.pyplot as plt

mp_pose = mp.solutions.pose
pose = mp_pose.Pose(static_image_mode=True, min_detection_confidence=0.3, model_complexity=2)
mp_drawing = mp.solutions.drawing_utils

from google.colab import files
from IPython.display import Image
uploaded = files.upload()

sample_img = cv2.imread('Picture35.png')
plt.figure(figsize = [10, 10])
plt.title("Sample Image");plt.axis('off');plt.imshow(sample_img[:,:,::-1]);plt.show()

results = pose.process(cv2.cvtColor(sample_img, cv2.COLOR_BGR2RGB))
if results.pose_landmarks:

    for i in range(33):
        print(f'{mp_pose.PoseLandmark(i).name}:\n{results.pose_landmarks.landmark[mp_pose.PoseLandmark(i).value]}')

import csv

# assume you have a list of landmarks stored in the variable 'landmarks'
# each landmark is a tuple of (x, y, z) coordinates
# for example: landmarks = [(x1, y1, z1), (x2, y2, z2), ...]

# open a CSV file for writing
with open('landmarks.xlsx', mode='w') as file:

    # create a CSV writer object
    writer = csv.writer(file, delimiter=',')

    # write the header row
    writer.writerow(['x', 'y', 'z'])

    # write the landmark coordinates to the file
    results = pose.process(cv2.cvtColor(sample_img, cv2.COLOR_BGR2RGB))
    if results.pose_landmarks:

      for i in range(32):
        writer.writerow(f'{mp_pose.PoseLandmark(i).name}:\n{results.pose_landmarks.landmark[mp_pose.PoseLandmark(i).value]}')

image_height, image_width, _ = sample_img.shape

if results.pose_landmarks:
    for i in range(33):

        print(f'{mp_pose.PoseLandmark(i).name}:') 
        print(f'x: {results.pose_landmarks.landmark[mp_pose.PoseLandmark(i).value].x * image_width}')
        print(f'y: {results.pose_landmarks.landmark[mp_pose.PoseLandmark(i).value].y * image_height}')
        print(f'z: {results.pose_landmarks.landmark[mp_pose.PoseLandmark(i).value].z * image_width}')
        print(f'visibility: {results.pose_landmarks.landmark[mp_pose.PoseLandmark(i).value].visibility}\n')

img_copy = sample_img.copy()
if results.pose_landmarks:

    mp_drawing.draw_landmarks(image=img_copy, landmark_list=results.pose_landmarks, connections=mp_pose.POSE_CONNECTIONS)

    fig = plt.figure(figsize = [10, 10])
    plt.title("Output");plt.axis('off');plt.imshow(img_copy[:,:,::-1]);plt.show()

mp_drawing.plot_landmarks(results.pose_world_landmarks, mp_pose.POSE_CONNECTIONS)

def calculateAngle(landmark1, landmark2, landmark3):
    '''
    This function calculates angle between three different landmarks.
    Args:
        landmark1: The first landmark containing the x,y and z coordinates....
        landmark2: The second landmark containing the x,y and z coordinates....
        landmark3: The third landmark containing the x,y and z coordinates....
    Returns:
        angle: The calculated angle between the three landmarks.
    We will be using this function in order to add angles on the results given by distances 
    '''

    x1, y1, _ = landmark1
    x2, y2, _ = landmark2
    x3, y3, _ = landmark3
    angle = math.degrees(math.atan2(y3 - y2, x3 - x2) - math.atan2(y1 - y2, x1 - x2))
    if angle < 0:
        angle += 360
    return angle

def detectPose(image, pose, display=True):

    output_image = image.copy()

    imageRGB = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    results = pose.process(imageRGB)
    height, width, _ = image.shape

    landmarks = []

    if results.pose_landmarks:

        mp_drawing.draw_landmarks(image=output_image, landmark_list=results.pose_landmarks,
                                  connections=mp_pose.POSE_CONNECTIONS)
        for landmark in results.pose_landmarks.landmark:
 
            landmarks.append((int(landmark.x * width), int(landmark.y * height),
                                  (landmark.z * width)))

    if display:

        plt.figure(figsize=[22,22])
        plt.subplot(121);plt.imshow(image[:,:,::-1]);plt.title("Original Image");plt.axis('off');
        plt.subplot(122);plt.imshow(output_image[:,:,::-1]);plt.title("Output Image");plt.axis('off');

        mp_drawing.plot_landmarks(results.pose_world_landmarks, mp_pose.POSE_CONNECTIONS)

    else:

        return output_image, landmarks

image = cv2.imread('Picture35.png')
output_image, landmarks = detectPose(image, pose, display=False)
#Elbow: 
left_elbow_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value],
                                      landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value],
                                      landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value])
right_elbow_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value],
                                       landmarks[mp_pose.PoseLandmark.RIGHT_ELBOW.value],
                                       landmarks[mp_pose.PoseLandmark.RIGHT_WRIST.value])  
#Shoulder  
left_shoulder_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value],
                                         landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value],
                                         landmarks[mp_pose.PoseLandmark.LEFT_HIP.value])
right_shoulder_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.RIGHT_HIP.value],
                                          landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value],
                                          landmarks[mp_pose.PoseLandmark.RIGHT_ELBOW.value])
#Knee
left_knee_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.LEFT_HIP.value],
                                     landmarks[mp_pose.PoseLandmark.LEFT_KNEE.value],
                                     landmarks[mp_pose.PoseLandmark.LEFT_ANKLE.value])
right_knee_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.RIGHT_HIP.value],
                                      landmarks[mp_pose.PoseLandmark.RIGHT_KNEE.value],
                                      landmarks[mp_pose.PoseLandmark.RIGHT_ANKLE.value])
#Foot
right_foot_angle_FMA = calculateAngle(landmarks[mp_pose.PoseLandmark.RIGHT_FOOT_INDEX.value],
                                      landmarks[mp_pose.PoseLandmark.RIGHT_ANKLE.value],
                                      landmarks[mp_pose.PoseLandmark.RIGHT_KNEE.value])

left_foot_angle_FMA = calculateAngle(landmarks[mp_pose.PoseLandmark.LEFT_FOOT_INDEX.value],
                                      landmarks[mp_pose.PoseLandmark.LEFT_ANKLE.value],
                                      landmarks[mp_pose.PoseLandmark.RIGHT_KNEE.value])

#hip

right_hip_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value],
                                      landmarks[mp_pose.PoseLandmark.RIGHT_HIP.value],
                                      landmarks[mp_pose.PoseLandmark.RIGHT_KNEE.value])


left_hip_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value],
                                      landmarks[mp_pose.PoseLandmark.LEFT_HIP.value],
                                      landmarks[mp_pose.PoseLandmark.LEFT_KNEE.value])

#wrist
right_wrist_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.RIGHT_ELBOW.value],
                                      landmarks[mp_pose.PoseLandmark.RIGHT_WRIST.value],
                                      landmarks[mp_pose.PoseLandmark.RIGHT_INDEX.value])

left_wrist_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value],
                                      landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value],
                                      landmarks[mp_pose.PoseLandmark.LEFT_INDEX.value])

#head
right_head_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.LEFT_EAR.value],
                                      landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value],
                                      landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value])

left_head_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.RIGHT_EAR.value],
                                      landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value],
                                      landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value])


print(f'{left_foot_angle_FMA}')  
print(f'{right_foot_angle_FMA}')
print(f'{left_knee_angle}')
print(f'{right_knee_angle}')
print(f'{left_hip_angle}')
print(f'{right_hip_angle}')
print(f'{left_shoulder_angle}')
print(f'{right_shoulder_angle}')
print(f'{left_elbow_angle}')
print(f'{right_elbow_angle}')
print(f'{left_wrist_angle}')
print(f'{right_wrist_angle}')
print(f'{left_head_angle}')
print(f'{right_head_angle}')

def classifyPose(landmarks, output_image, display=True):
    """
    This function classifies standing still (ful body) poses depending upon the angles of various body joints.
    Args:
        landmarks: A list of detected landmarks of the person whose pose needs to be classified which are of number 32
        output_image: A image of the person with the detected pose landmarks drawn
        display: A boolean value that is if set to true the function displays the resultant image with the pose label 
        written on it and returns nothing.
    Returns:
        output_image: The image with the detected pose landmarks drawn and pose label written.
        label: The classified pose label of the person in the output_image
        Accuarcy of the posture analysis (multi-categorical Classification task representing hypomibility)-->Every category is a primary indicative for going from one level of treatment to another.....
        Class 1: Normal (scale 0)
        Class 2: Minimal (Scale 1)
        Class 3: Moderate (Scale 2)
        Class 4: Significant (Scale 3)
        Class 5: Immobile (Scale 4)
 
    """

    label = 'Bad posture'
 
    # Specify the color (Red) with which the label will be written on the image.
    color = (0, 0, 255)
    
    # Calculate the required angles using the "calculateAngle" function we already defined (diving the body into three part)
    #Upper part
    # Get the angle between the left shoulder, elbow and wrist points. 
    left_elbow_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value],
                                      landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value],
                                      landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value])
    
    # Get the angle between the right shoulder, elbow and wrist points. 
    right_elbow_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value],
                                       landmarks[mp_pose.PoseLandmark.RIGHT_ELBOW.value],
                                       landmarks[mp_pose.PoseLandmark.RIGHT_WRIST.value])   
    
    #Middle part
    # Get the angle between the left elbow, shoulder and hip points. 
    left_shoulder_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value],
                                         landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value],
                                         landmarks[mp_pose.PoseLandmark.LEFT_HIP.value])
    
    # Get the angle between the right hip, shoulder and elbow points. 
    right_shoulder_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.RIGHT_HIP.value],
                                          landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value],
                                          landmarks[mp_pose.PoseLandmark.RIGHT_ELBOW.value])
    
    #Low part
    # Get the angle between the left hip, knee and ankle points. 
    left_knee_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.LEFT_HIP.value],
                                     landmarks[mp_pose.PoseLandmark.LEFT_KNEE.value],
                                     landmarks[mp_pose.PoseLandmark.LEFT_ANKLE.value])
    
    # Get the angle between the right hip, knee and ankle points 
    right_knee_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.RIGHT_HIP.value],
                                      landmarks[mp_pose.PoseLandmark.RIGHT_KNEE.value],
                                      landmarks[mp_pose.PoseLandmark.RIGHT_ANKLE.value])
    
   
    # As for both of them, both arms should be straight and shoulders should be at the specific angle.
    #First check 
    # Check if the both arms are straight.""

    if left_elbow_angle > 195 and left_elbow_angle < 165 and right_elbow_angle > 170 and right_elbow_angle < 165:
 
        if left_shoulder_angle > 15 and left_shoulder_angle < 25 and right_shoulder_angle > 15 and right_shoulder_angle < 25:
 
            if left_knee_angle > 165 and left_knee_angle < 195 and right_knee_angle > 165 and right_knee_angle < 195:
                label = 'Good posture'
 
    if label != 'Bad posture':
        color = (0, 255, 0)  

    cv2.putText(output_image, label, (10, 30),cv2.FONT_HERSHEY_PLAIN, 2, color, 2)

    if display:

        plt.figure(figsize=[10,10])
        plt.imshow(output_image[:,:,::-1]);plt.title("Output Image");plt.axis('off');
        
    else:

        return output_image, label

# Read a sample image and perform pose classification on it.
image = cv2.imread('Picture1.png')
output_image, landmarks = detectPose(image, pose, display=False)
if landmarks:
    classifyPose(landmarks, output_image, display=True)
    
**********************************************************************************************************
Used resources: https://drive.google.com/drive/folders/1UCeoxSmmm7CslrgpKquCVKtiJZDZeJ-z?usp=sharing 

Results: 
spreadsheet that contains results after running of : 
Landmarks before normalization 
Landmarks corrdinates after normalization
A photo of the person of course a standing still position
Parts of the body taken into account
Calculated angles using our version
Corresponding scores from Dr.Armiaâ€™s assessment. 
Pictures of landmarks in a 3 dimensional orientations.
File: https://docs.google.com/spreadsheets/d/1KW78wckjBiyydwk1ba1V4wc9LHsNEl7LF9o1g2vKXoU/edit?usp=sharing

A collected dataset where only labels of body parts, angles and scores are taken into account: 
File: https://docs.google.com/spreadsheets/d/1x-3Gzz8N1FMAonPvr5fjgSGiQlA-fobvylyuczHZ0X0/edit?usp=sharing


2. Advanced Version: 
Implementation: 
Code: https://colab.research.google.com/drive/1eMlJFjIB9WFr59GZjXgDKlGTHLQio964?usp=sharing 

Resources: https://drive.google.com/drive/folders/1trNbzPiRSf8WV0L1QpFgHVMMbIY0UJbz?usp=sharing 


Testing: NOTE THAT ALL PICTURES ARE SELECTED RANDOMLY 
Training with 100 pictures, testing with 50 pictures: 
Execution time: 50 seconds

Training with 300 pictures, testing with 50 pictures(these are always the  same pictures which are already assessed by Dr.Armia) 
Execution time: 1 min 33seconds

Training with 488 Images and testing with 50 Images 
Execution time: 3minutes 57 seconds
Results: https://docs.google.com/spreadsheets/d/1x-3Gzz8N1FMAonPvr5fjgSGiQlA-fobvylyuczHZ0X0/edit?usp=sharing

********************************************************

Original file is located at
    https://colab.research.google.com/drive/1eMlJFjIB9WFr59GZjXgDKlGTHLQio964
"""

!pip install mediapipe

import cv2
import mediapipe as mp
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
import os

mp_drawing = mp.solutions.drawing_utils
mp_pose = mp.solutions.pose
pose_detection = mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5)

def calculate_angles(image):
    
    pose_detection = mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5)

    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    results = pose_detection.process(image)

    joint_positions = []
    for landmark in results.pose_landmarks.landmark:
        joint_positions.append([landmark.x, landmark.y, landmark.z])

    angle_1 = calculate_angle(joint_positions[mp_pose.PoseLandmark.LEFT_SHOULDER.value], joint_positions[mp_pose.PoseLandmark.LEFT_ELBOW.value], joint_positions[mp_pose.PoseLandmark.LEFT_WRIST.value])
    angle_2 = calculate_angle(joint_positions[mp_pose.PoseLandmark.RIGHT_SHOULDER.value], joint_positions[mp_pose.PoseLandmark.RIGHT_ELBOW.value], joint_positions[mp_pose.PoseLandmark.RIGHT_WRIST.value])
    angle_3 = calculate_angle(joint_positions[mp_pose.PoseLandmark.LEFT_HIP.value], joint_positions[mp_pose.PoseLandmark.LEFT_KNEE.value], joint_positions[mp_pose.PoseLandmark.LEFT_ANKLE.value])
    angle_4 = calculate_angle(joint_positions[mp_pose.PoseLandmark.RIGHT_HIP.value], joint_positions[mp_pose.PoseLandmark.RIGHT_KNEE.value], joint_positions[mp_pose.PoseLandmark.RIGHT_ANKLE.value])
    
    return angle_1, angle_2, angle_3, angle_4

def calculate_angle(joint1, joint2, joint3):
   
    vec1 = np.array([joint2[0] - joint1[0], joint2[1] - joint1[1], joint2[2] - joint1[2]])
    vec2 = np.array([joint2[0] - joint3[0], joint2[1] - joint3[1], joint2[2] - joint3[2]])
    cosine_angle = np.dot(vec1, vec2) / (np.linalg.norm(vec1) * np.linalg.norm(vec2))
    angle = np.degrees(np.arccos(cosine_angle))
    return angle

def get_risk_of_injury(angle_1, angle_2, angle_3, angle_4):
    
    risk = 0
    if angle_1 > 170 or angle_2 > 170:
        risk += 1
    if angle_3 < 150 or angle_4 < 150:
        risk += 1
    if angle_1 > 170 and angle_2 > 170:
        risk += 1
    if angle_3 < 130 or angle_4 < 130:
        risk += 1
    if angle_1 > 170 and angle_2 > 170 and angle_3 < 130 and angle_4 < 130:
        risk += 1
    return risk

images = []
angles = []
risks = []


for i in range(1, 20):
    img = cv2.imread(f"Picture{i}.jpg")
    images.append(img)
    angle_1, angle_2, angle_3, angle_4 = calculate_angles(img)
    angles.append([angle_1, angle_2, angle_3, angle_4])
    risks.append(get_risk_of_injury(angle_1, angle_2, angle_3, angle_4))

angles = np.array(angles)
risks = np.array(risks)

scaler = StandardScaler()
angles = scaler.fit_transform(angles)

X_train, X_val, y_train, y_val = train_test_split(angles, risks, test_size=0.2, random_state=42)

logistic_model = LogisticRegression(random_state=42)
logistic_model.fit(X_train, y_train)

tree_model = DecisionTreeClassifier(random_state=42)
tree_model.fit(X_train, y_train)

y_pred_logistic = logistic_model.predict(X_val)
acc_logistic = accuracy_score(y_val, y_pred_logistic)
print("Logistic regression accuracy:", acc_logistic)

y_pred_tree = tree_model.predict(X_val)
acc_tree = accuracy_score(y_val, y_pred_tree)
print("Decision tree accuracy:", acc_tree)

new_image = cv2.imread("Picture32.jpg")
new_angle_1, new_angle_2, new_angle_3, new_angle_4 = calculate_angles(new_image)
new_angles = np.array([[new_angle_1, new_angle_2, new_angle_3, new_angle_4]])
new_angles = scaler.transform(new_angles)
risk_of_injury = logistic_model.predict(new_angles)[0]
print("Risk of injury:", risk_of_injury)

***********************************************************

